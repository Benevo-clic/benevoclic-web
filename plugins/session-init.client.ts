export default defineNuxtPlugin(() => {
  // Ce plugin s'ex√©cute uniquement c√¥t√© client
  if (process.server) {
    return {
      provide: {
        sessionSystem: {
          initialized: false
        }
      }
    }
  }

  process.env.NODE_ENV !== 'production' &&
    console.log('üöÄ Initialisation du syst√®me de persistance de session...')

  // Initialisation asynchrone
  ;(async () => {
    try {
      // Importer les composables n√©cessaires
      const { useSessionPersistence } = await import('~/composables/useSessionPersistence')
      const { usePageVisibility } = await import('~/composables/usePageVisibility')
      const { useSessionStore } = await import('~/stores/session.store')

      const sessionStore = useSessionStore()
      const { restoreSession } = useSessionPersistence()

      // Restaurer la session au d√©marrage
      process.env.NODE_ENV !== 'production' &&
        console.log('üîÑ Tentative de restauration de session...')
      const savedSession = await restoreSession()

      if (savedSession) {
        process.env.NODE_ENV !== 'production' && console.log('üì¶ Session trouv√©e, restauration...')
        const restored = await sessionStore.restoreSession(savedSession)

        if (restored) {
          process.env.NODE_ENV !== 'production' &&
            console.log('‚úÖ Session restaur√©e avec succ√®s au d√©marrage')
        } else {
          process.env.NODE_ENV !== 'production' &&
            console.log('‚ùå √âchec de la restauration de session')
        }
      } else {
        process.env.NODE_ENV !== 'production' && console.log('‚ÑπÔ∏è Aucune session √† restaurer')
      }

      // Initialiser la gestion de visibilit√© de page
      process.env.NODE_ENV !== 'production' &&
        console.log('üëÅÔ∏è Initialisation de la gestion de visibilit√©...')
      usePageVisibility()

      // Sauvegarder la session p√©riodiquement (toutes les 5 minutes)
      if (process.client) {
        setInterval(
          async () => {
            try {
              const { useAuthStore } = await import('~/stores/auth/auth.store')
              const authStore = useAuthStore()

              if (authStore.isAuthenticated) {
                await sessionStore.saveCurrentSession()
              }
            } catch (error) {
              process.env.NODE_ENV !== 'production' &&
                console.warn('‚ö†Ô∏è Erreur lors de la sauvegarde p√©riodique:', error)
            }
          },
          5 * 60 * 1000
        ) // 5 minutes
      }

      process.env.NODE_ENV !== 'production' &&
        console.log('‚úÖ Syst√®me de persistance de session initialis√©')
    } catch (error) {
      process.env.NODE_ENV !== 'production' &&
        console.error("‚ùå Erreur lors de l'initialisation du syst√®me de session:", error)
    }
  })()

  return {
    provide: {
      sessionSystem: {
        initialized: true
      }
    }
  }
})
