#!/usr/bin/env node

/**
 * Script d'analyse de code local (alternative √† CodeQL)
 * Usage: node scripts/code-analysis.js
 */

import { execSync } from 'child_process'
import { writeFileSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
const projectRoot = join(__dirname, '..')

function runCodeAnalysis() {
  console.log("üîç D√©but de l'analyse de code...\n")

  const report = {
    timestamp: new Date().toISOString(),
    summary: {
      totalFiles: 0,
      totalLines: 0,
      issues: {
        eslint: 0,
        typescript: 0,
        security: 0,
        dependencies: 0
      }
    }
  }

  try {
    // 1. Compter les fichiers
    console.log('üìä Analyse des fichiers...')
    const tsFiles = execSync(
      'find . -name "*.ts" -o -name "*.vue" -o -name "*.js" | grep -v node_modules | wc -l',
      { encoding: 'utf8' }
    ).trim()
    const totalLines = execSync(
      'find . -name "*.ts" -o -name "*.vue" -o -name "*.js" | grep -v node_modules | xargs wc -l | tail -1',
      { encoding: 'utf8' }
    ).trim()

    report.summary.totalFiles = parseInt(tsFiles)
    report.summary.totalLines = parseInt(totalLines.split(' ')[0])

    console.log(`   - Fichiers TypeScript/JavaScript/Vue: ${report.summary.totalFiles}`)
    console.log(`   - Lignes de code: ${report.summary.totalLines}`)

    // 2. ESLint
    console.log('\nüîß Analyse ESLint...')
    try {
      execSync('npm run lint', { encoding: 'utf8', stdio: 'pipe' })
      console.log('‚úÖ ESLint: Aucune erreur d√©tect√©e')
    } catch (error) {
      console.log('‚ö†Ô∏è  ESLint: Erreurs d√©tect√©es')
      report.summary.issues.eslint = 1
    }

    // 3. TypeScript
    console.log('\nüìù V√©rification TypeScript...')
    try {
      execSync('npm run type-check', { encoding: 'utf8', stdio: 'pipe' })
      console.log('‚úÖ TypeScript: Aucune erreur de type d√©tect√©e')
    } catch (error) {
      console.log('‚ö†Ô∏è  TypeScript: Erreurs de type d√©tect√©es')
      report.summary.issues.typescript = 1
    }

    // 4. Audit de s√©curit√©
    console.log('\nüîí Audit de s√©curit√©...')
    try {
      execSync('npm run audit:security', { encoding: 'utf8', stdio: 'pipe' })
      console.log('‚úÖ S√©curit√©: Aucune issue critique d√©tect√©e')
    } catch (error) {
      console.log('‚ö†Ô∏è  S√©curit√©: Issues d√©tect√©es')
      report.summary.issues.security = 1
    }

    // 5. Audit des d√©pendances
    console.log('\nüì¶ Audit des d√©pendances...')
    try {
      execSync('npm audit --audit-level=moderate', { encoding: 'utf8', stdio: 'pipe' })
      console.log('‚úÖ D√©pendances: Aucune vuln√©rabilit√© d√©tect√©e')
    } catch (error) {
      console.log('‚ö†Ô∏è  D√©pendances: Vuln√©rabilit√©s d√©tect√©es')
      report.summary.issues.dependencies = 1
    }

    // 6. G√©n√©ration du rapport
    console.log('\nÔøΩÔøΩ G√©n√©ration du rapport...')
    const reportPath = join(projectRoot, 'code-analysis-report.json')
    writeFileSync(reportPath, JSON.stringify(report, null, 2))
    console.log(`‚úÖ Rapport sauvegard√©: ${reportPath}`)

    // 7. Affichage du r√©sum√©
    console.log("\nüìä R√âSUM√â DE L'ANALYSE")
    console.log('='.repeat(50))
    console.log(`üìÖ Date: ${new Date(report.timestamp).toLocaleString()}`)
    console.log(`üìÅ Fichiers analys√©s: ${report.summary.totalFiles}`)
    console.log(`üìù Lignes de code: ${report.summary.totalLines}`)
    console.log(`üîß ESLint: ${report.summary.issues.eslint} erreur(s)`)
    console.log(`üìù TypeScript: ${report.summary.issues.typescript} erreur(s)`)
    console.log(`üîí S√©curit√©: ${report.summary.issues.security} issue(s)`)
    console.log(`üì¶ D√©pendances: ${report.summary.issues.dependencies} vuln√©rabilit√©(s)`)

    const totalIssues = Object.values(report.summary.issues).reduce((sum, count) => sum + count, 0)

    if (totalIssues === 0) {
      console.log('\nüéâ Aucune issue d√©tect√©e! Code de qualit√©.')
    } else {
      console.log(`\n‚ö†Ô∏è  Total: ${totalIssues} issue(s) d√©tect√©e(s)`)
      console.log("üí° Consultez le rapport d√©taill√© pour plus d'informations")
    }

    return report
  } catch (error) {
    console.error("‚ùå Erreur lors de l'analyse:", error.message)
    return null
  }
}

// V√©rifier si le script est ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  runCodeAnalysis()
}

export { runCodeAnalysis }
