#!/usr/bin/env node

/**
 * Script de d√©sactivation de CodeQL
 * Usage: node scripts/disable-codeql.js
 */

import { execSync } from 'child_process'
import { existsSync, unlinkSync } from 'fs'
import { join, dirname } from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)
const projectRoot = join(__dirname, '..')

function disableCodeQL() {
  console.log('üîß D√©sactivation de CodeQL...\n')

  const workflowsDir = join(projectRoot, '.github', 'workflows')
  const codeqlFiles = ['codeql-analysis.yml', 'codeql.yml', 'security.yml', 'code-scanning.yml']

  let removedCount = 0

  // 1. Supprimer les workflows CodeQL
  console.log('üìÅ Suppression des workflows CodeQL...')
  codeqlFiles.forEach(file => {
    const filePath = join(workflowsDir, file)
    if (existsSync(filePath)) {
      try {
        unlinkSync(filePath)
        console.log(`   ‚úÖ Supprim√©: ${file}`)
        removedCount++
      } catch (error) {
        console.log(`   ‚ùå Erreur lors de la suppression de ${file}:`, error.message)
      }
    } else {
      console.log(`   ‚ÑπÔ∏è  Non trouv√©: ${file}`)
    }
  })

  // 2. V√©rifier les workflows restants
  console.log('\nüìã Workflows restants:')
  try {
    const remainingWorkflows = execSync(`ls ${workflowsDir}`, { encoding: 'utf8' })
      .trim()
      .split('\n')
    remainingWorkflows.forEach(workflow => {
      console.log(`   - ${workflow}`)
    })
  } catch (error) {
    console.log('   ‚ùå Erreur lors de la lecture des workflows:', error.message)
  }

  // 3. V√©rifier les scripts disponibles
  console.log("\nüîß Scripts d'analyse disponibles:")
  const scripts = [
    'npm run audit:security',
    'npm run analyze:code',
    'npm run lint:security',
    'npm run auto:fix'
  ]

  scripts.forEach(script => {
    console.log(`   - ${script}`)
  })

  // 4. Instructions pour GitHub
  console.log('\nüìã Instructions pour GitHub:')
  console.log('1. Allez dans votre repository GitHub')
  console.log('2. Cliquez sur Settings (Param√®tres)')
  console.log('3. Dans le menu de gauche, cliquez sur Security (S√©curit√©)')
  console.log('4. Cliquez sur Code security and analysis')
  console.log('5. Trouvez Code scanning et cliquez sur Disable (D√©sactiver)')

  // 5. R√©sum√©
  console.log('\nüìä R√âSUM√â')
  console.log('='.repeat(50))
  console.log(`üìÅ Workflows CodeQL supprim√©s: ${removedCount}`)
  console.log('‚úÖ CodeQL d√©sactiv√© localement')
  console.log('‚úÖ Alternative locale disponible')
  console.log("‚úÖ Scripts d'analyse fonctionnels")

  if (removedCount > 0) {
    console.log('\nüéâ CodeQL a √©t√© d√©sactiv√© avec succ√®s!')
    console.log('üí° Utilisez maintenant les workflows alternatifs:')
    console.log('   - security-analysis.yml')
    console.log('   - code-analysis.yml')
    console.log('   - security-audit.yml')
  } else {
    console.log('\n‚ÑπÔ∏è  Aucun workflow CodeQL trouv√© √† supprimer')
    console.log('üí° CodeQL est probablement d√©j√† d√©sactiv√©')
  }

  console.log('\nüìù Prochaines √©tapes:')
  console.log('1. D√©sactiver CodeQL dans les param√®tres GitHub')
  console.log("2. Utiliser npm run analyze:code pour l'analyse locale")
  console.log('3. Utiliser les workflows alternatifs pour CI/CD')
  console.log('4. Monitorer les rapports g√©n√©r√©s')

  return removedCount
}

// V√©rifier si le script est ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  disableCodeQL()
}

export { disableCodeQL }
